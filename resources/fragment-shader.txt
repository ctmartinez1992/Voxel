#version 150

uniform mat4 model;

uniform struct Light {
   vec3 position;
   vec3 intensities;
   float attenuation;
   float ambientCoefficient;
} light;

in vec3 fragColor;
in vec3 fragNormal;
in vec3 fragVert;

out vec4 finalColor;

void main() {
    vec3 normal = normalize(transpose(inverse(mat3(model))) * fragNormal);
    vec3 surfacePos = vec3(model * vec4(fragVert, 1));
    vec4 surfaceColor = vec4(fragColor, 1);
    vec3 surfaceToLight = normalize(light.position - surfacePos);
    
    //Ambient.
    vec3 ambient = light.ambientCoefficient * surfaceColor.rgb * light.intensities;

    //Diffuse.
    float diffuseCoefficient = max(0.0, dot(normal, surfaceToLight));
    vec3 diffuse = diffuseCoefficient * surfaceColor.rgb * light.intensities;
        
    //Attenuation.
    float distanceToLight = length(light.position - surfacePos);
    float attenuation = 1.0 / (1.0 + light.attenuation * pow(distanceToLight, 2));

    //Linear color.
    vec3 linearColor = ambient + attenuation * diffuse;
    
    //Gamma correction and final color.
    vec3 gamma = vec3(1.0/2.2);
    finalColor = vec4(pow(linearColor, gamma), surfaceColor.a);
}